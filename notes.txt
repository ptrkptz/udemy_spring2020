18 - inversion of control
	 the approach of outsourcing the construction and management of objects.

sysout CTRL+SPACE
	will auto create -- System.out.println();
syserr CTRL+SPACE
	will auto create -- System.err.println();

21 - inversion control overview
	spring container is generically known as APPLICATION CONTEXT

22 - what is a spring bean
	simply a java object

27 - dependeny injection
	Textbook definition --client delegates to  calls to another object the responsibility of providing its dependencies
		WTF does that mean

	outsource the construction and injection of your object to an external entity

	two types of injections
		constructor injection
			STEPS:
			define dependenct interface and class 
			create a constructor in your class for injections
			config the dependency injection in Spring config file
		setter injection

34 -- setter injection


40 -- inject values from a properties file

43 -- bean scope
	what is a singleton
		spring container creates only one instance of the bean, by default
		it is cached in memory
		all reqeust for the bean will return a SHARED reference to the SAME bean

	singleton - create a singel shared instance of the bean -- default scope
	prototype - creates a new bean instance for each container request.
	request - scoped to an HTTP web request - web apps
	session - scoped to an HTTP web session - web apps
	global-sesssion - - scoped to a global HTTP web session - web apps

46 - bean lifecycle

	container started > bean instatited > dependencies injected > internal spring processing > your customer init method > bean is ready to use >>PROCESSING>> container is shutdown > your custom method destroyed > STOP


	add custom code during bean init
		calling custom business logic
		setting up handles to resources (db, sockets, file, etc)

	add custom code during destruction
		calling custom business logic
		destroy handles to resources (db, sockets, file, etc)	

	'init-method' -- setup
	'destroy-method' -- destroy



51 - Java annotations
	special labels/markers added to java classes
	provide meta-data about the class
	processed at compile time or run-time for special processing

	why spring config w/ annotations
		xml config can be verbose
		config your spring bean w/ annotations
		annotations minimize the xml config

	scanning components classes
		spring will scan your java classes for special annotations
		auto register the beans in the spring container

58 - spring dependency injection w/ annotations and autowiring
	for dependency injection, spring can use auto wiring
	spring will look for a class that matches the property
		matches by type: class or interface
	spring will inject it automatically... hence it is autowired

63 - setter injection
	create setter method(s) in your class for injections
	config the dep injection w/ @Autowired Annotation 

64 - method injection
	the setter name does not have to match the class name
	from this:
		@Autowired
		public void setFortuneSvc(FortuneService theFortuneSvc) {
			System.out.println(" >> TennisCoach: inside fortuneSvc method");
			fortuneSvc=theFortuneSvc;
		}
	to this:
		@Autowired
		public void doSomethingElse(FortuneService theFortuneSvc) {
			System.out.println(" >> TennisCoach: inside doSomethingElse() method");
			fortuneSvc=theFortuneSvc;
		}

	and everything still worked...

66 - field injection
	uses java reflection

68 - which type of injection to use...
	use consistency
	all same functionality

69 - annotationa autowiring and  qualifiers
	what if there are multiple?
		'NoUniqueBeanDefinitionException' error... spring cannot figure it out which bean to use
	use @Qualifier("thisBean")
		can be used on constructor, setter and field injection

Start of 9
-----------
76 - @Scope annotation
Default scope - singleton
	spring container creates only one instance of the bean, by default
	cached in memory
	all requests for the bean
		will return a SHARED reference to the same bean
Prototype
	new object for each request
		@Scope("prototype")

78 - bean lifecycle method annotations
	@PostConstruct
		code will execute after the constructor and after injection of dependencies
	@PreDestroy
		code will execute before bean is destroyed
	
79 - lifecycle special notes
	Return type
		method CAN have return type, but 'void' is most common.
			if you add a return type, you will not be able to capture the value
	Arguments
		method CANNOT accept any arguments

80 - java 9 users w/ @PostConstruct and @PreDestroy
	will get error
		'eclipse is unable to import @PreDestroy and @PostConstruct'
			b/c javax.annotation has been removed from default classpath -- download javax.annotation-api-1.3.2.jar


82 - lifecycle and prototype scope
	'Prototype' scoped beans, Spring does not call the @PreDestroy


84 - spring config with java code
	3 ways of config spring container
		1 - full xml
		2 - xml component scan
		3 - java config

	dev process
		1. java class w/ @Configuration 
		2. add component scanning @ComponentScan (optional)
		3. read spring java config class
		4. retrieve bean from spring container

86 - add logging for java config

87 - Define spring beans w/ java code
	1. define method to expose bean
	2. inject bean dependencies
	3. read spring java config class
	4. retrieve bean from spring container

91 - inject values for properties file
	1. create properties file
	2. load prop file in spring config
		@PropertySource
	3. reference value from prop file 
		@Value(${"foo.this"})
			this is called field level injection

96 - spring MVC
	framework for building web applications in Java
	based on Model-View-Controller design pattern
	leverages features of the Core Spring Framework

	benefits
		build web app UIs in java
		reusable UI components
		helps manage app state for web requests
		process form data
		flexible config for the view layer

97 mvc - behind the scenes
	component
		web pages
		collection of spring beans
		spring config

	Front Controller AKA DispatcherServlet
		part of the Spring framework (jar file)
	devs create - model, view and controller

	Controller
		dev code
		contains biz logic
			handle request
			store /retrieve data (from DB, etc)
			place data in model

	Model - contains data
		use to pass data 

	View - JSP and JSTL is most common
		jstl - JSP Std Tag Library
		jsp - Java Server Page

100 MVC config - overview
	Part 1
		add config to file: WEB-INF/web.xml
		1. Config mvc dispatcher servlet
		2. set url mappings to mvc dispatcher servlet
	Part 2
		config for file: WEB-INF/spring-mvc-demo-servlet.xml
		3. add support for spring component scannning
		4. add support for conversion, formatting and validation
		5. config spring mvc vew resolver 

103 -- here are configs without using XML (Java Config)

104 - Spring MVC - overview
1. create controller class
2. define controller method
3. add request mapping to controller method
4. return view name
5. develop view page

@Controller inherit from @Component




SKIP MVC


170 - Hibernate overview
Hibernate is a framework for persisting/saving Java objects ni a database

Benefits
- handles all low-level sql 
- minimizes the amt of JDBC code you hve to develop
- provides the Object-to-relational mapping (ORM)

ORM
dev defines mapping between java class and DB table

SAve java object with Hibernate
// create Java object
Student theStudent = new Student("John,", "Doe","email");
//save it to the DB
int theId = (Integer) session.save(theStudent);
	-- session is a special Hibernate object
	-- H will steore the data in the DB
	-- H will return the primary key

Retrieve a java object with H
// now retrieve from DB using the primary key
Student myStudent = session.get(Student.class, theId);
	-- H will query th table for the given id

Query for java objects
Query query = session.createQuery("from the Student");
List<Studnet> students = query.list();

171 - H and JDBC
H uses JDBC for all db communications
