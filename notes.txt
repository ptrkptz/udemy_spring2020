18 - inversion of control
	 the approach of outsourcing the construction and management of objects.

sysout CTRL+SPACE
	will auto create -- System.out.println();
syserr CTRL+SPACE
	will auto create -- System.err.println();

21 - inversion control overview
	spring container is generically known as APPLICATION CONTEXT

22 - what is a spring bean
	simply a java object

27 - dependeny injection
	Textbook definition --client delegates to  calls to another object the responsibility of providing its dependencies
		WTF does that mean

	outsource the construction and injection of your object to an external entity

	two types of injections
		constructor injection
			STEPS:
			define dependenct interface and class 
			create a constructor in your class for injections
			config the dependency injection in Spring config file
		setter injection

34 -- setter injection


40 -- inject values from a properties file

43 -- bean scope
	what is a singleton
		spring container creates only one instance of the bean, by default
		it is cached in memory
		all reqeust for the bean will return a SHARED reference to the SAME bean

	singleton - create a singel shared instance of the bean -- default scope
	prototype - creates a new bean instance for each container request.
	request - scoped to an HTTP web request - web apps
	session - scoped to an HTTP web session - web apps
	global-sesssion - - scoped to a global HTTP web session - web apps

46 - bean lifecycle

	container started > bean instatited > dependencies injected > internal spring processing > your customer init method > bean is ready to use >>PROCESSING>> container is shutdown > your custom method destroyed > STOP


	add custom code during bean init
		calling custom business logic
		setting up handles to resources (db, sockets, file, etc)

	add custom code during destruction
		calling custom business logic
		destroy handles to resources (db, sockets, file, etc)	

	'init-method' -- setup
	'destroy-method' -- destroy



51 - Java annotations
	special labels/markers added to java classes
	provide meta-data about the class
	processed at compile time or run-time for special processing

	why spring config w/ annotations
		xml config can be verbose
		config your spring bean w/ annotations
		annotations minimize the xml config

	scanning components classes
		spring will scan your java classes for special annotations
		auto register the beans in the spring container

58 - spring dependency injection w/ annotations and autowiring
	for dependency injection, spring can use auto wiring
	spring will look for a class that matches the property
		matches by type: class or interface
	spring will inject it automatically... hence it is autowired

63 - setter injection
	create setter method(s) in your class for injections
	config the dep injection w/ @Autowired Annotation 

64 - method injection
	the setter name does not have to match the class name
	from this:
		@Autowired
		public void setFortuneSvc(FortuneService theFortuneSvc) {
			System.out.println(" >> TennisCoach: inside fortuneSvc method");
			fortuneSvc=theFortuneSvc;
		}
	to this:
		@Autowired
		public void doSomethingElse(FortuneService theFortuneSvc) {
			System.out.println(" >> TennisCoach: inside doSomethingElse() method");
			fortuneSvc=theFortuneSvc;
		}

	and everything still worked...

66 - field injection
	uses java reflection

68 - which type of injection to use...
	use consistency
	all same functionality

69 - annotationa autowiring and  qualifiers
	what if there are multiple?
		'NoUniqueBeanDefinitionException' error... spring cannot figure it out which bean to use
	use @Qualifier("thisBean")
		can be used on constructor, setter and field injection

